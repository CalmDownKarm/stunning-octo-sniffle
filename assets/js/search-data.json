{
  
    
        "post0": {
            "title": "Project Ideas",
            "content": "I occasionally think of doing small ML things that are fun. Im hoping that by writing them down publically, it’ll push me to actually making progress on some of them. . Joe Rogan Stance Detection - Speech to text JRE episodes, topic model them and then do aspect based sentiment analysis/stance detection, build out a network graph of his and his guests views on certain topics as expressed in the podcast. | Using Gpt3 to generate recipes, actually cooking them and making my friends eat them. | solidity decompiler that leverages NMT and nucleus sampling to give nice/readable source. | finetuning stable diffusion to automatically generate battlemaps for dnd. | automatically generating ad-copy. | .",
            "url": "https://calmdownkarm.com/backlog/2022/10/28/project-idea.html",
            "relUrl": "/backlog/2022/10/28/project-idea.html",
            "date": " • Oct 28, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Needles in Haystacks",
            "content": "I’m working on research that tries to tie together narratives from news articles. At the outset, this sounds like a relatively simple problem, but like all problems, there’s more to it than is immediately apparent. . A baseline assumption is that narratives in the news are characterized by a series of events; set to a chronological timeline. Then, we can tie individual events to each other and the broader narrative once we define a relationship. . So the first question becomes, what is an event - and how do we identify that an event has occurred? Initially, we were drawn to the event extraction task, as it’s a well-known task in the NLP world, which implies a lot of prior work in this area. However, something that quickly becomes obvious is that there are a lot of different definitions of events, and with each definition, the extraction pipeline changes quite dramatically. In our specific case, it seems helpful to think of events as how laypeople would think of events - something happening in the real world. How the news talks about events usually involve a significant amount of repetition of specific terminology. Thus we can characterize events by certain linguistic signatures that the news uses to talk about these events. So in our thus simplified case, the first problem reduces to extracting these signatures of events from the news articles. . For example, most people are aware of the news about The Mueller investigation of possible collusion between Russia and Trump in the 2016 election. A linguistic signature of that event could be “Trump-Russia inquiry”; it could equally be “Inquiry on Russia and Trump Allies,” and it’s likely not “Trump campaign ties to Moscow” even though those are terms that are closely related. A quick and easy way to find these sorts of terms is to find words that co-occur in the corpus of articles and calculate a normalized co-occurrence probability of the words across all the pieces in the corpus. By doing this, we can extract all the most common phrases from the corpus of documents. However, this leads us to a specific problem - the candidate phrases will have some distribution. Some ubiquitous phrases will be related to the event; others may not be related to the event but may be widespread phrases that occur in those articles because they are signatures of a closely related event. Lastly, the event-to-phrase mapping isn’t 1:1, so there could be multiple phrases that map to the same event. . So given that we can extract all of these candidate phrases, the next step is to collapse/compress these candidate phrases into specific linguistic signatures of an event and filter out linguistic representations that belong to a particular event. Something we’re finding helpful in this step is the idea of semantic similarity/paraphrase mining. Encode the phrases using an appropriate sbert model and see which phrases are the most similar using cosine similarity. This small set of final phrases can be human-annotated for quality. Then we can brute force extract every candidate phrase from the corpus and match each phrase from the signature set against the sentences to find a set of articles that are all closely related to that event. This final set of articles thus represents the coverage of a particular event in the news. . Once we have the articles for the event, that may solve this task’s first problem. Of course, it completely ignores the fact that, at the moment, we have no way of estimating recall - we don’t know how many linguistic signatures we’re missing because we don’t know what we don’t know and have no idea how many linguistic signatures are present in the corpus. A solution to that problem would be to annotate a subset and pick the subset reasonably where we can believe that the samples are representative of the corpus at large, but that has its own issues. . However, once we have the article set, we embark upon a much more complex problem - how to structure the events into a narrative. .",
            "url": "https://calmdownkarm.com/research/2022/10/13/needles-in-haystacks.html",
            "relUrl": "/research/2022/10/13/needles-in-haystacks.html",
            "date": " • Oct 13, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://calmdownkarm.com/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "My name is Karmanya Aggarwal, I’m a machine learning researcher and engineer with a focus in productionizing NLP and an interest in Natural Language Generation. . I’m currently at the University of Pennsylvania for grad school and actively looking for opportunities starting May 2023. . The title of this websitecomes from my interest in Brazilian Jiu Jitsu - a martial art that I am quite horrible at, but enjoy immensely. As someone that’s had a fairly chaotic life, I do believe that it’s important to keep a steady eye on what’s important, and to work towards improving at things that are important to you. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://calmdownkarm.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://calmdownkarm.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}